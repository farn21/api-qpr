# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2022-11-19 05:31
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re
import sa_api_v2.apikey.models
import sa_api_v2.models.caching
import sa_api_v2.models.core
import sa_api_v2.models.mixins
import sa_api_v2.models.profiles
import storages.backends.s3boto


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'db_table': 'auth_user',
            },
            bases=(sa_api_v2.models.caching.CacheClearingModel, models.Model),
            managers=[
                ('objects', sa_api_v2.models.profiles.ShareaboutsUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now)),
                ('updated_datetime', models.DateTimeField(auto_now=True, db_index=True)),
                ('action', models.CharField(default=b'create', max_length=16)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_datetime'],
                'db_table': 'sa_api_activity',
            },
            bases=(sa_api_v2.models.caching.CacheClearingModel, models.Model),
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(default=sa_api_v2.apikey.models.generate_unique_api_key, max_length=32, unique=True)),
                ('logged_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_used', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'apikey_apikey',
            },
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now)),
                ('updated_datetime', models.DateTimeField(auto_now=True, db_index=True)),
                ('file', models.ImageField(storage=storages.backends.s3boto.S3BotoStorage(), upload_to=sa_api_v2.models.core.timestamp_filename)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('visible', models.BooleanField(db_index=True, default=True)),
                ('type', models.CharField(choices=[(b'CO', b'Cover'), (b'RT', b'Rich Text')], default=b'CO', max_length=2)),
            ],
            options={
                'db_table': 'sa_api_attachment',
            },
            bases=(sa_api_v2.models.caching.CacheClearingModel, models.Model),
        ),
        migrations.CreateModel(
            name='DataIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attr_name', models.CharField(db_index=True, max_length=100, verbose_name=b'Attribute name')),
                ('attr_type', models.CharField(choices=[(b'string', b'String')], default=b'string', max_length=10, verbose_name=b'Attribute type')),
            ],
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(max_length=128)),
                ('slug', models.SlugField(default='', max_length=128)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datasets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sa_api_dataset',
            },
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, sa_api_v2.models.caching.CacheClearingModel, models.Model),
        ),
        migrations.CreateModel(
            name='DataSetPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_set', models.CharField(blank=True, help_text=b'Either the name of a submission set (e.g., "comments"), "tags", or "places". Leave blank to refer to all things.', max_length=128)),
                ('can_retrieve', models.BooleanField(default=True)),
                ('can_create', models.BooleanField(default=False)),
                ('can_update', models.BooleanField(default=False)),
                ('can_destroy', models.BooleanField(default=False)),
                ('can_access_protected', models.BooleanField(default=False)),
                ('priority', models.PositiveIntegerField(blank=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='sa_api_v2.DataSet')),
            ],
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, sa_api_v2.models.caching.CacheClearingModel, models.Model),
        ),
        migrations.CreateModel(
            name='DataSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('json', models.TextField()),
                ('csv', models.TextField()),
            ],
            options={
                'db_table': 'sa_api_datasnapshot',
            },
        ),
        migrations.CreateModel(
            name='DataSnapshotRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_set', models.CharField(max_length=128)),
                ('include_private_fields', models.BooleanField(default=False)),
                ('include_private_places', models.BooleanField(default=False)),
                ('include_invisible', models.BooleanField(default=False)),
                ('include_submissions', models.BooleanField(default=False)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.TextField(blank=True, default=b'')),
                ('fulfilled_at', models.DateTimeField(null=True)),
                ('guid', models.TextField(blank=True, default=b'', unique=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sa_api_v2.DataSet')),
                ('requester', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sa_api_datasnapshotrequest',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text=b'What is the name of the group to which users with this group belong? For example: "judges", "administrators", "winners", ...', max_length=32)),
                ('dataset', models.ForeignKey(help_text=b'Which dataset does this group apply to?', on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='sa_api_v2.DataSet')),
                ('submitters', models.ManyToManyField(blank=True, related_name='_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sa_api_group',
            },
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GroupPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_set', models.CharField(blank=True, help_text=b'Either the name of a submission set (e.g., "comments"), "tags", or "places". Leave blank to refer to all things.', max_length=128)),
                ('can_retrieve', models.BooleanField(default=True)),
                ('can_create', models.BooleanField(default=False)),
                ('can_update', models.BooleanField(default=False)),
                ('can_destroy', models.BooleanField(default=False)),
                ('can_access_protected', models.BooleanField(default=False)),
                ('priority', models.PositiveIntegerField(blank=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='sa_api_v2.Group')),
            ],
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, sa_api_v2.models.caching.CacheClearingModel, models.Model),
        ),
        migrations.CreateModel(
            name='IndexedValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(db_index=True, max_length=100, null=True)),
                ('index', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='sa_api_v2.DataIndex')),
            ],
        ),
        migrations.CreateModel(
            name='KeyPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_set', models.CharField(blank=True, help_text=b'Either the name of a submission set (e.g., "comments"), "tags", or "places". Leave blank to refer to all things.', max_length=128)),
                ('can_retrieve', models.BooleanField(default=True)),
                ('can_create', models.BooleanField(default=False)),
                ('can_update', models.BooleanField(default=False)),
                ('can_destroy', models.BooleanField(default=False)),
                ('can_access_protected', models.BooleanField(default=False)),
                ('priority', models.PositiveIntegerField(blank=True)),
                ('key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='sa_api_v2.ApiKey')),
            ],
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, sa_api_v2.models.caching.CacheClearingModel, models.Model),
        ),
                migrations.CreateModel(
            name='Origin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern', models.CharField(help_text=b'The origin pattern, e.g., https://*.github.io, http://localhost:*, http*://map.phila.gov', max_length=100)),
                ('logged_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_used', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('dataset', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='origins', to='sa_api_v2.DataSet')),
            ],
            options={
                'db_table': 'cors_origin',
            },
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OriginPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_set', models.CharField(blank=True, help_text=b'Either the name of a submission set (e.g., "comments"), "tags", or "places". Leave blank to refer to all things.', max_length=128)),
                ('can_retrieve', models.BooleanField(default=True)),
                ('can_create', models.BooleanField(default=False)),
                ('can_update', models.BooleanField(default=False)),
                ('can_destroy', models.BooleanField(default=False)),
                ('can_access_protected', models.BooleanField(default=False)),
                ('priority', models.PositiveIntegerField(blank=True)),
                ('origin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='sa_api_v2.Origin')),
            ],
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, sa_api_v2.models.caching.CacheClearingModel, models.Model),
        ),
        migrations.CreateModel(
            name='PlaceEmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now)),
                ('updated_datetime', models.DateTimeField(auto_now=True, db_index=True)),
                ('submission_set', models.CharField(blank=True, help_text=b'The name of a submission set         (e.g., "comments", "places", "support"). Leave blank to         refer to all submission sets.', max_length=128)),
                ('event', models.CharField(choices=[(b'add', b'On add')], default=b'add', max_length=128)),
                ('recipient_email_field', models.CharField(max_length=128)),
                ('from_email', models.EmailField(max_length=254)),
                ('bcc_email_1', models.EmailField(blank=True, default=None, max_length=254, null=True)),
                ('bcc_email_2', models.EmailField(blank=True, default=None, max_length=254, null=True)),
                ('bcc_email_3', models.EmailField(blank=True, default=None, max_length=254, null=True)),
                ('bcc_email_4', models.EmailField(blank=True, default=None, max_length=254, null=True)),
                ('bcc_email_5', models.EmailField(blank=True, default=None, max_length=254, null=True)),
                ('subject', models.CharField(max_length=512)),
                ('body_text', models.TextField()),
                ('body_html', models.TextField(blank=True, default=None)),
            ],
            options={
                'db_table': 'sa_api_place_email_templates',
            },
        ),
        migrations.CreateModel(
            name='PlaceTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now)),
                ('updated_datetime', models.DateTimeField(auto_now=True, db_index=True)),
                ('note', models.TextField(blank=True)),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_datetime'],
                'db_table': 'ms_api_place_tag',
            },
        ),
        migrations.CreateModel(
            name='SubmittedThing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now)),
                ('updated_datetime', models.DateTimeField(auto_now=True, db_index=True)),
                ('data', models.TextField(default=b'{}')),
                ('visible', models.BooleanField(db_index=True, default=True)),
            ],
            options={
                'db_table': 'sa_api_submittedthing',
            },
            bases=(sa_api_v2.models.mixins.CloneableModelMixin, sa_api_v2.models.caching.CacheClearingModel, models.Model),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24)),
                ('color', models.CharField(blank=True, max_length=7, null=True, validators=[django.core.validators.RegexValidator(code=b'invalid', message=b'Enter a valid color.', regex=re.compile(b'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'))])),
                ('is_enabled', models.BooleanField(default=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='sa_api_v2.DataSet')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='sa_api_v2.Tag')),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'ms_api_tag',
            },
        ),
        migrations.CreateModel(
            name='TagClosure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('depth', models.IntegerField()),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagclosure_parents', to='sa_api_v2.Tag')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagclosure_children', to='sa_api_v2.Tag')),
            ],
            options={
                'db_table': 'ms_api_tagclosure',
            },
        ),
        migrations.CreateModel(
            name='Webhook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now)),
                ('updated_datetime', models.DateTimeField(auto_now=True, db_index=True)),
                ('submission_set', models.CharField(max_length=128)),
                ('event', models.CharField(choices=[(b'add', b'On add')], default=b'add', max_length=128)),
                ('url', models.URLField(max_length=2048)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhooks', to='sa_api_v2.DataSet')),
            ],
            options={
                'db_table': 'sa_api_webhook',
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('submittedthing_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sa_api_v2.SubmittedThing')),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
                ('private', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'ordering': ['-updated_datetime'],
                'db_table': 'sa_api_place',
                'verbose_name': 'place',
            },
            bases=('sa_api_v2.submittedthing',),
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('submittedthing_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sa_api_v2.SubmittedThing')),
                ('set_name', models.TextField(db_index=True)),
                ('place_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='sa_api_v2.Place')),
            ],
            options={
                'ordering': ['-updated_datetime'],
                'db_table': 'sa_api_submission',
            },
            bases=('sa_api_v2.submittedthing',),
        ),
        migrations.AddField(
            model_name='submittedthing',
            name='dataset',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='things', to='sa_api_v2.DataSet'),
        ),
        migrations.AddField(
            model_name='submittedthing',
            name='submitter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='things', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='placetag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='place_tags', to='sa_api_v2.Tag'),
        ),
        migrations.AddField(
            model_name='origin',
            name='place_email_template',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='origins', to='sa_api_v2.PlaceEmailTemplate'),
        ),
        migrations.AddField(
            model_name='indexedvalue',
            name='thing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indexed_values', to='sa_api_v2.SubmittedThing'),
        ),
        migrations.AddField(
            model_name='datasnapshot',
            name='request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fulfillment', to='sa_api_v2.DataSnapshotRequest'),
        ),
        migrations.AddField(
            model_name='dataindex',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indexes', to='sa_api_v2.DataSet'),
        ),
        migrations.AddField(
            model_name='attachment',
            name='thing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='sa_api_v2.SubmittedThing'),
        ),
        migrations.AddField(
            model_name='apikey',
            name='dataset',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='keys', to='sa_api_v2.DataSet'),
        ),
        migrations.AddField(
            model_name='action',
            name='thing',
            field=models.ForeignKey(db_column=b'data_id', on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='sa_api_v2.SubmittedThing'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='tagclosure',
            unique_together=set([('parent', 'child')]),
        ),
        migrations.AddField(
            model_name='placetag',
            name='place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='sa_api_v2.Place'),
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together=set([('name', 'dataset')]),
        ),
        migrations.AlterUniqueTogether(
            name='dataset',
            unique_together=set([('owner', 'slug')]),
        ),
    ]
